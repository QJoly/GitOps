{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitOps","text":"<p>Bienvenue sur la documentation de mon projet GitOps me permettant de d\u00e9ployer mon infrastructure automatiquement.</p>"},{"location":"#materiel","title":"Mat\u00e9riel","text":""},{"location":"#maison","title":"Maison","text":"<p>Je dispose d'un cluster Kubernetes compos\u00e9s de machines ARM (pour la faible consommation d'\u00e9nergie). Celui-ci est bas\u00e9 sur 4 noeuds :</p> Nom R\u00e9f\u00e9rence M\u00e9moire vive Taille disque jack-Rackham Rock64 4Go 16Go olivier-levasseur Rock64 4Go 64Go la-buse Raspberry Pi 4 4Go 64Go mary-read Raspberry Pi 4 4Go 64Go <p> </p> <p>C'est un petit peu le bordel, mais c'est compact. Il y a \u00e9galement un ventilateur derri\u00e8re le commutateur.</p>"},{"location":"#cloud","title":"Cloud","text":"<p>Sur mon hyperviseur Proxmox (Chez OVH), j'ai install\u00e9 mon Kubernetes \u00e0 l'aide de Ansible / Terraform.</p> Nom M\u00e9moire vive Taille disque Kubemaster-0 5Go 128Go Kubenode-1 5Go 128Go Kubenode-2 5Go 128Go Kubenode-3 5Go 128Go <p> </p>"},{"location":"dep/","title":"Installer les d\u00e9pendances","text":"<p>La plupart des d\u00e9pendances peuvent s'installer dans votre r\u00e9pertoire home (dans le dossier <code>~/.local/bin</code>). Je vous recommande fortement d'ajouter de mani\u00e8re permanente ce dossier dans votre variable d'environnement <code>$PATH</code>.</p> <p>Pour cela, ajoutez la ligne suivante dans votre fichier <code>~/.bashrc</code> pour Bash, ou <code>~/.zshrc</code> pour Zsh.</p>"},{"location":"dep/#installation-de-terraform","title":"Installation de Terraform","text":"<p>Le d\u00e9tail de l'installation est disponible sur le site officiel de Hashicorp (lien ici)</p>"},{"location":"dep/#ubuntu-debian","title":"Ubuntu / Debian","text":"<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n</code></pre>"},{"location":"dep/#linux","title":"Linux","text":"<pre><code>wget https://releases.hashicorp.com/terraform/1.4.2/terraform_1.4.2_linux_amd64.zip -O- | gunzip -c - &gt; terraform\nchmod +x ./terraform\nmkdir -p ~/.local/bin\nmv ./terraform ~/.local/bin/terraform\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que Terraform est bien install\u00e9, lancez la commande <code>terraform -version</code>.</p>"},{"location":"dep/#installation-de-packer","title":"Installation de Packer","text":"<p>Le d\u00e9tail de l'installation est disponible sur le site officiel de Hashicorp (lien ici)</p>"},{"location":"dep/#ubuntu-debian_1","title":"Ubuntu / Debian","text":"<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install packer\n</code></pre>"},{"location":"dep/#linux_1","title":"Linux","text":"<pre><code>wget https://releases.hashicorp.com/packer/1.8.6/packer_1.8.6_linux_amd64.zip -O- | gunzip -c - &gt; terraform\nchmod +x ./packer\nmkdir -p ~/.local/bin\nmv ./packer ~/.local/bin/packer\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifiez que Packer est bien install\u00e9, lancez la commande <code>packer -version</code>.</p>"},{"location":"dep/#j2cli","title":"J2Cli","text":"<p>j2cli est la version 'ligne de commande' de l'outil Jinja2 permettant de cr\u00e9er des contenus dynamiques dans des fichiers textuels. Dans le projet <code>GitOps</code>, nous l'utilisons pour faire du remplacement dans les fichiers <code>preseed.cfg</code> durant l'installation de Debian.</p> <p>Il sera n\u00e9c\u00e9ssaire d'avoir Python3 et Pip install\u00e9 sur votre syst\u00e8me. Si ce n'est pas le cas, je vous invite \u00e0 consulter cette page.</p> <pre><code>python3 -m pip install j2cli\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que j2cli est bien install\u00e9, lancez la commande <code>j2 -v</code>.</p>"},{"location":"dep/#installation-de-yq","title":"Installation de yq","text":"<p>YQ est un utilitaire permettant d'interagir avec les fichiers <code>.yaml</code> et <code>.json</code> depuis la CLI Bash. Nous l'utilisons pour convertir le fichier <code>secret.dev.yaml</code> en <code>.env</code>.</p> <pre><code>mkdir -p ~/.local/bin\nwget https://github.com/mikefarah/yq/releases/download/v4.32.2/yq_linux_amd64 -O ~/.local/bin/yq\nchmod +x ~/.local/bin/yq\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que YQ est bien install\u00e9, lancez la commande <code>yq --version</code>.</p>"},{"location":"dep/#installation-de-taskfile","title":"Installation de Taskfile","text":"<p>Taskfile est un utilitaire rempla\u00e7ant les fichiers <code>Makefile</code>.</p>"},{"location":"dep/#ubuntu-debian_2","title":"Ubuntu / Debian","text":"<pre><code>wget https://github.com/go-task/task/releases/download/v3.22.0/task_linux_amd64.deb\nsudo dpkg -i task_linux_amd64.deb\n</code></pre>"},{"location":"dep/#linux_2","title":"Linux","text":"<pre><code>mkdir -p ~/.local/bin\nwget https://github.com/go-task/task/releases/download/v3.22.0/task_linux_amd64.tar.gz | tar xvfz -\nmv ./task ~/.local/bin/task\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que Taskfile est bien install\u00e9, lancez la commande <code>task --version</code>.</p>"},{"location":"dep/#installation-de-flux","title":"Installation de Flux","text":"<pre><code>mkdir -p ~/.local/bin\nwget https://github.com/fluxcd/flux2/releases/download/v0.41.1/flux_0.41.1_linux_amd64.tar.gz -O - | tar xvfz -\nmv ./flux ~/.local/bin/flux\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que Flux est bien install\u00e9, lancez la commande <code>flux --version</code>.</p>"},{"location":"dep/#installation-de-sops-faculatif","title":"Installation de SOPS (Faculatif)","text":"<p>SOPS est un outil permettant de chiffrer des sections dans des YML, JSON, INI. Je l'utilise pour stocker des secrets dans mon d\u00e9p\u00f4t qui seront ind\u00e9chiffrables sans ma cl\u00e9 Age.</p> <p>L'usage de SOPS est facultatif. Vous pouvez tr\u00e8s bien cr\u00e9er votre fichier secret.*.yaml sans chiffrer.</p> <pre><code>wget https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux -O- | gunzip -c - &gt; sops\nchmod +x ./sops\nmkdir -p ~/.local/bin\nmv ./sops ~/.local/bin/sops\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Vous trouverez un exemple d'utilisation de Sops et Age sur cette page</p>"},{"location":"dep/#installation-de-pre-commit-faculatif","title":"Installation de Pre-Commit (Faculatif)","text":"<p>Pre-Commit nous permet de cr\u00e9er un Hook sur Git qui va effectuer des actions avant de commit nos modifications.</p> <p>Dans le contexte de ce projet, pre-commit permet de chiffrer certaines variables dans les fichiers de configuration (ex: <code>secret.dev.yaml</code>).</p> <pre><code>python3 -m pip install pre-commit\nexport PATH=$PATH:~/.local/bin/\n</code></pre>"},{"location":"fork/","title":"Fork le projet","text":"<p>Si vous voulez utiliser mon projet, je vous invite \u00e0 cr\u00e9er un Fork sur un d\u00e9p\u00f4t Git qui vous appartient.</p> <p>Une fois le d\u00e9p\u00f4t copi\u00e9, il suffira de modifier l'URL utilis\u00e9e par Flux durant le d\u00e9ploiement dans les fichiers <code>./kubernetes/flux-system/GitRepository</code> et <code>./kubernetes/flux-system/kustomization-git.yml</code>.</p> <p><pre><code>---\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: GitRepository\nmetadata:\n  name: qjoly\n  namespace: flux-system\nspec:\n  interval: 1m0s\n  url: https://github.com/qjoly/GitOps\n  ref:\n    branch: main\n</code></pre> <pre><code>apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: qjoly\n  namespace: flux-system\nspec:\n  interval: 5m0s\n  path: ./kubernetes\n  prune: true\n  sourceRef:\n    kind: GitRepository\n    name: qjoly\n</code></pre></p>"},{"location":"libvirt/","title":"Utiliser Libvirt sans les permissions root","text":"<p>Le module Terraform Libvirt n'est utilisable que via l'URI <code>qemu:///system</code> (Je souhaite r\u00e9soudre ce probl\u00e8me au plus vite mais j'ai l'impression qu'il manque quelque chose au provider\u2026). Si vous souhaitez lancer ce projet via un utilisateur non-root, il est imp\u00e9ratif de rendre le socket Qemu disponible pour votre utilisateur.</p> <p>Je vous recommande donc de modifier la configuration de Libvirt <code>/etc/libvirt/libvirtd.conf</code> afin que la valeur <code>unix_sock_group</code> soit d\u00e9finie \u00e0 <code>libvirt</code>. Cr\u00e9ez ensuite le groupe nomm\u00e9 <code>libvirt</code> via la commande <code>addgroup libvirt</code>. </p> <p>Ensuite, ajoutez votre propre utilisateur \u00e0 ce nouveau groupe <code>sudo usermod -a -G libvirt $(whoami)</code>. </p> <p>Une fois le service <code>libvirtd</code> red\u00e9marr\u00e9, vous pourrez tester l'acc\u00e8s au socket via la commande <code>virsh -c qemu:///system list</code>.</p>"},{"location":"proxmox/","title":"Cr\u00e9ation d'un utilisateur proxmox","text":"<p>Par s\u00e9curit\u00e9, je vous recommande de cr\u00e9er un utilisateur proxmox avec les permissions minimales.</p> <p>Vous devrez d'abord cr\u00e9er un utilisateur ayant les permissions n\u00e9c\u00e9ssaires \u00e0 la cr\u00e9ation/modification d'une machine virtuelle. Lancez les commandes suivantes dans le terminal d'un Proxmox (un des noeuds du cluster) : <pre><code>export role_proxmox=gitops\nexport user_proxmox=gitops\npveum role add ${role_proxmox} -privs \"Datastore.AllocateSpace Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt VM.Console\"\npveum user add ${user_proxmox}@pve\npveum aclmod / -user ${user_proxmox}@pve -role ${role_proxmox}\n</code></pre> Note: la permission VM.Console est uniquement utilis\u00e9e par Packer.</p> <p>Vous devrez \u00e9galement ajouter les acc\u00e8s \u00e0 vos pools de stockage manuellement (Datacenter -&gt; Permissions -&gt; Add):</p> <p> </p> <p>Une fois les permissions ajout\u00e9es, vous pouvez d\u00e9finir un mot de passe \u00e0 votre utilisateur directement sur la WebUI</p>"},{"location":"sops/","title":"Chiffrer vos secrets","text":"<p>Article r\u00e9sumant Sops et son age disponible: ici</p> <p>Sops est un outil permettant de chiffrer des fichiers de configuration. Celui-ci utilise une m\u00e9thode de chiffrement asym\u00e9trique, c'est-\u00e0-dire qu'il utilise une cl\u00e9 publique pour chiffrer et une cl\u00e9 priv\u00e9e pour d\u00e9chiffrer. Cela permet de chiffrer des fichiers de configuration et de les partager avec d'autres personnes sans avoir \u00e0 partager la cl\u00e9 priv\u00e9e.</p> <p>Mon projet GitOps utilise Sops pour chiffrer le fichier principal de configuration <code>secret.*.yaml</code>. Il est recommand\u00e9 d'avoir deux cl\u00e9s diff\u00e9rentes: l'une pour le d\u00e9ploiement Packer/Terraform, l'autre pour le d\u00e9ploiement sur Kubernetes via FluxCD.</p> <p>Il est toutefois possible d'utiliser la m\u00eame cl\u00e9 pour les deux d\u00e9ploiements.</p>"},{"location":"sops/#creation-des-cles-de-chiffrement","title":"Cr\u00e9ation des cl\u00e9s de chiffrement","text":"<p>J'utilise Age pour g\u00e9n\u00e9rer les cl\u00e9s de chiffrement. Age est un outil permettant de g\u00e9n\u00e9rer des cl\u00e9s de chiffrement asym\u00e9trique.</p>"},{"location":"sops/#cle-de-chiffrement-pour-packerterraform","title":"Cl\u00e9 de chiffrement pour Packer/Terraform","text":"<pre><code># G\u00e9n\u00e9ration de la cl\u00e9 de chiffrement pour Packer/Terraform\nmkdir ~/.age/\nage-keygen -o ~/.age/packer-terraform.key\nexport SOPS_AGE_KEY_FILE=~/.age/packer-terraform.key\n</code></pre>"},{"location":"sops/#cle-de-chiffrement-pour-fluxcd","title":"Cl\u00e9 de chiffrement pour FluxCD","text":"<p>Il faut placer la cl\u00e9 de chiffrement \u00e0 l'emplacement <code>.secrets/age</code> du d\u00e9p\u00f4t GitOps.</p> <p>Vous pouvez alors reprendre la m\u00eame cl\u00e9 de chiffrement que pour Packer/Terraform ou en g\u00e9n\u00e9rer une nouvelle.</p> <pre><code>cp ~/.age/packer-terraform.key .secrets/age\n# OU\ntask kubernetes:create-age-key\n</code></pre>"},{"location":"sops/#configurer-cette-cle","title":"Configurer cette cl\u00e9","text":"<pre><code>  - cmd: task kubernetes:create-age-key\n    ignore_error: true\n  - task kubernetes:create-age-secret\n  - task kubernetes:configure-sops-with-age-key\n</code></pre> <p>Lancer la tache <code>kubernetes:create-age-secret</code> pour cr\u00e9er un secret Kubernetes contenant la cl\u00e9 de chiffrement.</p> <pre><code>task kubernetes:create-age-secret\n</code></pre> <p>Pour configurer le fichier <code>kubernetes/.sops.yaml</code> avec la cl\u00e9 de chiffrement, lancer la tache <code>kubernetes:configure-sops-with-age-key</code>.</p> <p>**Ne pas oublier de commiter les changements </p>"},{"location":"start/","title":"Lancement du projet","text":"<p>Avant de lancer la commande <code>task</code> qui va ex\u00e9cuter les t\u00e2ches une-par-une, il convient de v\u00e9rifier que les d\u00e9pendances soient pr\u00e9sentes sur votre machine.</p> <p>La page permettant d'installer les d\u00e9pendances est accessible ici</p>"},{"location":"start/#configuration","title":"Configuration","text":"<p>Avant de lancer la t\u00e2che permettant de lancer les \u00e9tapes \u00e0 la suite. Il est n\u00e9cessaire de configurer les fichiers suivants\u00a0:</p> <ul> <li><code>Taskfile.yaml</code></li> <li><code>secret.dev.yaml</code></li> </ul>"},{"location":"start/#taskfile","title":"Taskfile","text":"<p>Dans le fichier <code>Taskfile.yaml</code>, voici les variables \u00e0 \u00e9diter\u00a0:</p> <pre><code>vars:\n  secret_file: ./secret.dev.yaml\n  hypervisor: Libvirt\n  distribution: Debian \n</code></pre> <ul> <li><code>secret_file</code> renvoie vers le fichier contenant les variables n\u00e9cessaire \u00e0 Packer et Terraform.</li> <li><code>hypervisor</code> permet \u00e0 task de lancer Terraform/Packer dans des contextes diff\u00e9rents\u00a0: (ex:<code>VM/Libvirt</code> pour Terraform si l'hyperviseur est <code>Libvirt</code>). Pour l'instant, je n'ai pr\u00e9vu que Proxmox et Libvirt.</li> <li><code>distribution</code> fonctionne d'une mani\u00e8re identique \u00e0 <code>hypervisor</code> : permet \u00e0 Packer/Terraform de trouver des contextes adapt\u00e9s (ex:<code>VM/Libvirt/Debian</code> si l'hyperviseur est <code>Libvirt</code> et la distribution est <code>Debian</code>)</li> </ul>"},{"location":"start/#secretfile","title":"SecretFile","text":"<p>Voici un fichier <code>secret.dev.yml</code> fonctionnel:</p> <pre><code>vmtemplate:\n    debian:\n        enabled: true\n        id: 9001 # Only for Proxmox\n        name: Debian\n        root_password: rootpassword\n        username: utilisateur\n        password: pass\n        # Depending of the format of the disk\n        disk_prefix: vd\n        cpu: 2\n        memory: 1024\n        # Only absolute path\n        ssh_key: /home/kiko/.ssh/id_ed25519.pub\n        disk_size: 8192\n        iso:\n            url: https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-11.6.0-amd64-netinst.iso\n            checksum: sha512:224cd98011b9184e49f858a46096c6ff4894adff8945ce89b194541afdfd93b73b4666b0705234bd4dff42c0a914fdb6037dd0982efb5813e8a553d8e92e6f51\nhypervisor:\n    libvirt:\n        pool_dir: ~/.libvirt/pool\n        pool_name: cluster\n        # Libvirt will use qemu:///system as URI\nprovisionning:\n    debian:\n        enabled: true\n        cpu: 2\n        memory: 1024\n        # Only compatible for Debian, Alpine is not yet supported by k3s-ansible\n        kubernetes:\n            enabled: true\n            nodes: 2\n</code></pre> <p>Par d\u00e9faut, ce fichier va d\u00e9ployer 2 machines virtuelles et lancer le r\u00f4le <code>k3s-ansible</code> pour installer Kubernetes</p>"},{"location":"start/#lancer-le-projet","title":"Lancer le projet","text":""},{"location":"start/#methode-automatique","title":"M\u00e9thode automatique","text":"<p>Pour lancer les diff\u00e9rentes \u00e9tapes \u00e0 la suite, il suffit de lancer la commande :</p> <pre><code>task general:all\n</code></pre> <p>R\u00e9sultat de la commande :</p>"},{"location":"start/#methode-manuelle","title":"M\u00e9thode manuelle","text":"<p>Il est \u00e9galement possible de lancer les \u00e9tapes une-par-une en utilisant task.</p> <p>En utilisant la commande <code>task -l</code>, vous verrez les diff\u00e9rentes actions configur\u00e9es:</p> <pre><code>task: Available tasks for this project:\n* general:all:                     Run every task\n* general:clean:                   Clean everything\n* general:env:                     Generate dotenv file\n* general:prepare-ansible:         clone k3s-ansible if needed\n* general:requirements:            Check if requirements are installed\n* kubernetes:check-flux-pre:       Check if flux can be installed\n* kubernetes:configure-flux:       Add the qjoly/gitops repo as source in flux\n* kubernetes:fetch_config:         Download the kubeconfig of master\n* kubernetes:install-flux:         Install flux\n* kubernetes:k9s:                  Run k9s using new kubeconfig\n* kubernetes:pods:                 Get all running pods\n* packer:debian:                   Run Debian-Packer\n* terraform:alpine:                Terraform apply for Alpine\n* terraform:debian:                Terraform apply for Debian\n* terraform:destroy-debian:        Terraform destroy for Debian\n* terraform:provisioning:          Run all step in Terraform\n</code></pre> <p>Voici les \u00e9tapes lanc\u00e9es dans l'ordre :</p> <ul> <li>general:env</li> <li>general:prepare-ansible</li> <li>packer:debian</li> <li>terraform:provisioning</li> <li>kubernetes:fetch_config</li> <li>kubernetes:check-flux-pre</li> <li>kubernetes:install-flux</li> <li>kubernetes:configure-flux</li> </ul>"},{"location":"troubleshooting/","title":"Failed to connect fe80::","text":"<p>En utilisant le provider Libvirt sur Terraform, il est possible que vous tombiez sur cette erreur durant le lancement d'Ansible. <pre><code>\u2502 TASK [Gathering Facts] *********************************************************\n\u2502 fatal: [kube-0-tf]: UNREACHABLE! =&gt; {\"changed\": false, \"msg\": \"Failed to connect to the host via ssh: ssh: connect to host fe80::5054:ff:fec2:1c4 port 22: Invalid argument\", \"unreachable\": true}\n\u2502 ok: [kube-2-tf]\n\u2502 ok: [kube-1-tf]\n</code></pre></p> <p>La raison est que Terraform r\u00e9cup\u00e8re l'adresse IP de la machine avant qu'elle ne puisse obtenir son adresse IPv4.</p> <p>La seule solution trouv\u00e9e pour le moment est de relancer le Terraform pour qu'il obtienne l'IPv4. Le fichier <code>inventory.ini</code> sera recr\u00e9\u00e9.</p>"}]}