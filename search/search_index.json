{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitOps","text":"<p>Bienvenue sur la documentation de mon projet GitOps me permettant de d\u00e9ployer mon infrastructure automatiquement.</p>"},{"location":"#materiel","title":"Mat\u00e9riel","text":""},{"location":"#maison","title":"Maison","text":"<p>Je dispose d'un cluster Kubernetes compos\u00e9s de machines ARM (pour la faible consommation d'\u00e9nergie). Celui-ci est bas\u00e9 sur 4 noeuds :</p> Nom R\u00e9f\u00e9rence M\u00e9moire vive Taille disque jack-Rackham Rock64 4Go 16Go olivier-levasseur Rock64 4Go 64Go la-buse Raspberry Pi 4 4Go 64Go mary-read Raspberry Pi 4 4Go 64Go <p> </p> <p>C'est un petit peu le bordel, mais c'est compact. Il y a \u00e9galement un ventilateur derri\u00e8re le commutateur.</p>"},{"location":"#cloud","title":"Cloud","text":"<p>Sur mon hyperviseur Proxmox (Chez OVH), j'ai install\u00e9 mon Kubernetes \u00e0 l'aide de Ansible / Terraform.</p> Nom M\u00e9moire vive Taille disque Kubemaster-0 5Go 128Go Kubenode-1 5Go 128Go Kubenode-2 5Go 128Go Kubenode-3 5Go 128Go <p> </p>"},{"location":"dep/","title":"Installer les d\u00e9pendances","text":"<p>La plupart des d\u00e9pendances peuvent s'installer dans votre r\u00e9pertoire home (dans le dossier <code>~/.local/bin</code>). Je vous recommande fortement d'ajouter de mani\u00e8re permanente ce dossier dans votre variable d'environnement <code>$PATH</code>.</p> <p>Pour cela, ajoutez la ligne suivante dans votre fichier <code>~/.bashrc</code> pour Bash, ou <code>~/.zshrc</code> pour Zsh.</p>"},{"location":"dep/#installation-de-terraform","title":"Installation de Terraform","text":"<p>Le d\u00e9tail de l'installation est disponible sur le site officiel de Hashicorp (lien ici)</p>"},{"location":"dep/#ubuntu-debian","title":"Ubuntu / Debian","text":"<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n</code></pre>"},{"location":"dep/#linux","title":"Linux","text":"<pre><code>wget https://releases.hashicorp.com/terraform/1.4.2/terraform_1.4.2_linux_amd64.zip -O- | gunzip -c - &gt; terraform\nchmod +x ./terraform\nmkdir -p ~/.local/bin\nmv ./terraform ~/.local/bin/terraform\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que Terraform est bien install\u00e9, lancez la commande <code>terraform -version</code>.</p>"},{"location":"dep/#installation-de-packer","title":"Installation de Packer","text":"<p>Le d\u00e9tail de l'installation est disponible sur le site officiel de Hashicorp (lien ici)</p>"},{"location":"dep/#ubuntu-debian_1","title":"Ubuntu / Debian","text":"<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install packer\n</code></pre>"},{"location":"dep/#linux_1","title":"Linux","text":"<pre><code>wget https://releases.hashicorp.com/packer/1.8.6/packer_1.8.6_linux_amd64.zip -O- | gunzip -c - &gt; terraform\nchmod +x ./packer\nmkdir -p ~/.local/bin\nmv ./packer ~/.local/bin/packer\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifiez que Packer est bien install\u00e9, lancez la commande <code>packer -version</code>.</p>"},{"location":"dep/#j2cli","title":"J2Cli","text":"<p>j2cli est la version 'ligne de commande' de l'outil Jinja2 permettant de cr\u00e9er des contenus dynamiques dans des fichiers textuels. Dans le projet <code>GitOps</code>, nous l'utilisons pour faire du remplacement dans les fichiers <code>preseed.cfg</code> durant l'installation de Debian.</p> <p>Il sera n\u00e9c\u00e9ssaire d'avoir Python3 et Pip install\u00e9 sur votre syst\u00e8me. Si ce n'est pas le cas, je vous invite \u00e0 consulter cette page.</p> <pre><code>python3 -m pip install j2cli\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que j2cli est bien install\u00e9, lancez la commande <code>j2 -v</code>.</p>"},{"location":"dep/#installation-de-yq","title":"Installation de yq","text":"<p>YQ est un utilitaire permettant d'interagir avec les fichiers <code>.yaml</code> et <code>.json</code> depuis la CLI Bash. Nous l'utilisons pour convertir le fichier <code>secret.dev.yaml</code> en <code>.env</code>.</p> <pre><code>mkdir -p ~/.local/bin\nwget https://github.com/mikefarah/yq/releases/download/v4.32.2/yq_linux_amd64 -O ~/.local/bin/yq\nchmod +x ~/.local/bin/yq\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que YQ est bien install\u00e9, lancez la commande <code>yq --version</code>.</p>"},{"location":"dep/#installation-de-taskfile","title":"Installation de Taskfile","text":"<p>Taskfile est un utilitaire rempla\u00e7ant les fichiers <code>Makefile</code>.</p>"},{"location":"dep/#ubuntu-debian_2","title":"Ubuntu / Debian","text":"<pre><code>wget https://github.com/go-task/task/releases/download/v3.22.0/task_linux_amd64.deb\nsudo dpkg -i task_linux_amd64.deb\n</code></pre>"},{"location":"dep/#linux_2","title":"Linux","text":"<pre><code>mkdir -p ~/.local/bin\nwget https://github.com/go-task/task/releases/download/v3.22.0/task_linux_amd64.tar.gz | tar xvfz -\nmv ./task ~/.local/bin/task\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que Taskfile est bien install\u00e9, lancez la commande <code>task --version</code>.</p>"},{"location":"dep/#installation-de-flux","title":"Installation de Flux","text":"<pre><code>mkdir -p ~/.local/bin\nwget https://github.com/fluxcd/flux2/releases/download/v0.41.1/flux_0.41.1_linux_amd64.tar.gz -O - | tar xvfz -\nmv ./flux ~/.local/bin/flux\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Pour v\u00e9rifier que Flux est bien install\u00e9, lancez la commande <code>flux --version</code>.</p>"},{"location":"dep/#installation-de-sops-faculatif","title":"Installation de SOPS (Faculatif)","text":"<p>SOPS est un outil permettant de chiffrer des sections dans des YML, JSON, INI. Je l'utilise pour stocker des secrets dans mon d\u00e9p\u00f4t qui seront ind\u00e9chiffrables sans ma cl\u00e9 Age.</p> <p>L'usage de SOPS est facultatif. Vous pouvez tr\u00e8s bien cr\u00e9er votre fichier secret.*.yaml sans chiffrer.</p> <pre><code>wget https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux -O- | gunzip -c - &gt; sops\nchmod +x ./sops\nmkdir -p ~/.local/bin\nmv ./sops ~/.local/bin/sops\nexport PATH=$PATH:~/.local/bin/\n</code></pre> <p>Vous trouverez un exemple d'utilisation de Sops et Age sur cette page</p>"},{"location":"dep/#installation-de-pre-commit-faculatif","title":"Installation de Pre-Commit (Faculatif)","text":"<p>Pre-Commit nous permet de cr\u00e9er un Hook sur Git qui va effectuer des actions avant de commit nos modifications.</p> <p>Dans le contexte de ce projet, pre-commit permet de chiffrer certaines variables dans les fichiers de configuration (ex: <code>secret.dev.yaml</code>).</p> <pre><code>python3 -m pip install pre-commit\nexport PATH=$PATH:~/.local/bin/\n</code></pre>"},{"location":"fork/","title":"Fork le projet","text":"<p>Si vous voulez utiliser mon projet, je vous invite \u00e0 cr\u00e9er un Fork sur un d\u00e9p\u00f4t Git qui vous appartient.</p> <p>Une fois le d\u00e9p\u00f4t copi\u00e9, il suffira de modifier l'URL utilis\u00e9e par Flux durant le d\u00e9ploiement dans les fichiers <code>./kubernetes/flux-system/GitRepository</code> et <code>./kubernetes/flux-system/kustomization-git.yml</code>.</p> <p><pre><code>---\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: GitRepository\nmetadata:\n  name: qjoly\n  namespace: flux-system\nspec:\n  interval: 1m0s\n  url: https://github.com/qjoly/GitOps\n  ref:\n    branch: main\n</code></pre> <pre><code>apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: qjoly\n  namespace: flux-system\nspec:\n  interval: 5m0s\n  path: ./kubernetes\n  prune: true\n  sourceRef:\n    kind: GitRepository\n    name: qjoly\n</code></pre></p>"},{"location":"libvirt/","title":"Utiliser Libvirt sans les permissions root","text":"<p>Le module Terraform Libvirt n'est utilisable que via l'URI <code>qemu:///system</code> (Je souhaite r\u00e9soudre ce probl\u00e8me au plus vite mais j'ai l'impression qu'il manque quelque chose au provider\u2026). Si vous souhaitez lancer ce projet via un utilisateur non-root, il est imp\u00e9ratif de rendre le socket Qemu disponible pour votre utilisateur.</p> <p>Je vous recommande donc de modifier la configuration de Libvirt <code>/etc/libvirt/libvirtd.conf</code> afin que la valeur <code>unix_sock_group</code> soit d\u00e9finie \u00e0 <code>libvirt</code>. Cr\u00e9ez ensuite le groupe nomm\u00e9 <code>libvirt</code> via la commande <code>addgroup libvirt</code>. </p> <p>Ensuite, ajoutez votre propre utilisateur \u00e0 ce nouveau groupe <code>sudo usermod -a -G libvirt $(whoami)</code>. </p> <p>Une fois le service <code>libvirtd</code> red\u00e9marr\u00e9, vous pourrez tester l'acc\u00e8s au socket via la commande <code>virsh -c qemu:///system list</code>.</p>"},{"location":"proxmox/","title":"Cr\u00e9ation d'un utilisateur proxmox","text":"<p>Par s\u00e9curit\u00e9, je vous recommande de cr\u00e9er un utilisateur proxmox avec les permissions minimales.</p> <p>Vous devrez d'abord cr\u00e9er un utilisateur ayant les permissions n\u00e9c\u00e9ssaires \u00e0 la cr\u00e9ation/modification d'une machine virtuelle. Lancez les commandes suivantes dans le terminal d'un Proxmox (un des noeuds du cluster) : <pre><code>export role_proxmox=gitops\nexport user_proxmox=gitops\npveum role add ${role_proxmox} -privs \"Datastore.AllocateSpace Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt VM.Console\"\npveum user add ${user_proxmox}@pve\npveum aclmod / -user ${user_proxmox}@pve -role ${role_proxmox}\n</code></pre> Note: la permission VM.Console est uniquement utilis\u00e9e par Packer.</p> <p>Vous devrez \u00e9galement ajouter les acc\u00e8s \u00e0 vos pools de stockage manuellement (Datacenter -&gt; Permissions -&gt; Add):</p> <p> </p> <p>Une fois les permissions ajout\u00e9es, vous pouvez d\u00e9finir un mot de passe \u00e0 votre utilisateur directement sur la WebUI</p>"},{"location":"sops/","title":"Chiffrer vos secrets","text":"<p>Cette page est une copie de mon article disponible ici</p> <p>Pour \u00e9viter d'envoyer ses secrets sur Git, nous devons toujours \u00eatre vigileant avant un quelconque Push. Et c'est justement le but de  Sops (Secrets OPerationS) qui va nous aider \u00e0 stocker nos informations sur le d\u00e9p\u00f4t.. mais en les chiffrant.</p> <p>Celui-ci est compatible avec de nombreux gestionnaires de secret comme :  - Hashicorp Vault - GCP KMS - PGP - Age (Celui que nous allons utiliser)</p> <p>Age est un outil en Go simple et moderne. Celui-ci propose un format qui semble \u00eatre valid\u00e9 par de nombreux experts.</p>"},{"location":"sops/#creer-notre-cle-age","title":"Cr\u00e9er notre cl\u00e9 Age","text":"<p>Vous pouvez installer Age en suivant les instructions sur le d\u00e9p\u00f4t officiel ici</p> <p>Nous allons donc cr\u00e9er notre propre cl\u00e9 avec age. </p> <pre><code>mkdir -p ~/.keys/\nage-keygen -o ~/.keys/ma-cle\n</code></pre> <p>En inspectant le contenu du fichier <code>~/.keys/ma-cle</code>, nous remarquons un sch\u00e9ma que l'on connait bien : une cl\u00e9 publique, et une cl\u00e9 priv\u00e9e. </p> <pre><code># created: 2023-02-15T07:50:20+01:00\n# public key: age1220x7zmnp0j8du3vxk67a4mdkr3gqn9djjn7f7gamjclr3em7g2sxpns35\nAGE-SECRET-KEY-1JY9Q0NWNRK4DCT9J3D2H0Z9D5ZY0XHV8EJ39JKKK2PW6SUH9FTFSN9T6HF\n</code></pre> <p>Et pour que Sops utilise cette cl\u00e9, nous allons cr\u00e9er la variable d'environnement <code>SOPS_AGE_KEY_FILE</code> dans notre <code>~/.bashrc</code> ou <code>~/.zshrs</code>.</p> <pre><code>export SOPS_AGE_KEY_FILE=~/.keys/ma-cle\n</code></pre> <p>Maintenant, nous pouvons passer au niveau sup\u00e9rieur : cr\u00e9er notre premier fichier de secret.</p>"},{"location":"sops/#sops-en-pratique","title":"Sops, en pratique","text":"<p>Vous pouvez installer Sops sur un syst\u00e8me Amd64 en suivant ces instructions:  <pre><code>wget https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64 -O /usr/bin/sops\nchmod +x /usr/bin/sops\n</code></pre></p> <p>Notre syst\u00e8me d'authentification est d\u00e9j\u00e0 cr\u00e9\u00e9 : c'est notre couple de cl\u00e9 AGE. Ce que nous allons faire maintenant, c'est cr\u00e9er un secret qui sera d\u00e9chiffrable uniquement par notre cl\u00e9 priv\u00e9e.</p> <p>Premi\u00e8re chose que nous allons faire, c'est cr\u00e9er notre fichier <code>.sops.yaml</code>.</p> <p>Ce fichier permet de d\u00e9finir quels fichiers devront \u00eatre manoeuvr\u00e9s par SOPS et surtout : quels cl\u00e9s ont acc\u00e8s \u00e0 ces fichiers. </p> <pre><code># .sops.yaml\ncreation_rules:\n    - path_regex: secret.*\\.ya?ml\n      encrypted_regex: \"^(username|password)$\"\n      key_groups:\n      - age:\n        - age1220x7zmnp0j8du3vxk67a4mdkr3gqn9djjn7f7gamjclr3em7g2sxpns35\n</code></pre> <p>Cr\u00e9ons maintenant un fichier <code>secret.dev.yml</code>:  <pre><code>username: \"thebidouilleur\"\npassword: jadorelabidouille\nurl: \"https://thebidouilleur.xyz\"\nQI: 7.2\n</code></pre></p> <p>et affichons ce m\u00eame fichier en le chiffrant avec sops via l'argument <code>-e</code> (encrypt). <pre><code>\u279c  sops -e secret.dev.yml\nusername: ENC[AES256_GCM,data:8KUxRrhWLWsbxzJqxRQ=,iv:qJQYUgCQ6wv9fmn+scJ3ui7tFD6lpoRH0qpC+n58sF8=,tag:RJdluEfMdnXy6Zhpxn2AyQ==,type:str]\npassword: ENC[AES256_GCM,data:dm9t60SH/4/wqy3Ww5RxaDU=,iv:ch0ZRbhN6+ouCNXzgWO63GHK9ewgOMpfJMzjYxIq8h4=,tag:EKRHJBwRV8ZRRpDMaGG4sQ==,type:str]\nurl: https://thebidouilleur.xyz\nQI: 7.2\nsops:\n    kms: []\ngcp_kms: []\nazure_kv: []\nhc_vault: []\nage:\n        - recipient: age14ysm820ajay8wqslnkjqcewvq4tmeucth3a88qk4a7hl0mnwkfaqmj6xx5\n          enc: |\n-----BEGIN AGE ENCRYPTED FILE-----\n            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBHZU9xNklSTkRTU0p0SFV3\n            NE1tV2M2Wjk3SDl2a1lJWk8wQi96Yjk2eUVjCi9qSWREUkZqTFpOa1luZEFlb2lK\n            dHBBNDllSFlhL2cycW82SGl4bDU2YXcKLS0tIHd5aCsyK1BHT2dDTGpZWUxITE83\n            MFd5MlowTHNIekVXTzJWbXNuUmxGRWsKp1o+kh9lbWBLh6rZ4845c31rxowb9uX+\n            /a01TYbiWfn2lWmUJ+gXq0nQZxqo3iDEI+mrG+n+c79rmq6BGPYVPw==\n-----END AGE ENCRYPTED FILE-----\n    lastmodified: \"2023-02-15T11:44:32Z\"\nmac: ENC[AES256_GCM,data:cUtxnG/ycha3Zk0xNrmeioeBB9SiH3U4ENbnGtkpJmM9SBOFVZGKikaDZwdk1c2aflC07kELIoN0BxspgJseCLNvA3nsTYEEjHe53zJZUaDYn7u0D1+th3XjYdU17zdx9ECN5SjExvOIDLmQ4j512/LCN+lBVi4SxaJWDqzzva0=,iv:vhrbuibyInOxcYihgMVZN8c0v05GdPXB+EbACQijg9s=,tag:GHLv+agLCXcTiUDq8gBEkA==,type:str]\npgp: []\nencrypted_regex: ^(username|password)$\n    version: 3.7.3\n</code></pre></p> <p>Ni l'URL, ni mon QI n'ont \u00e9t\u00e9 chiffr\u00e9s. Gardez \u00e9galement en t\u00eate que la commande ne fait qu'afficher un output du m\u00eame fichier chiffr\u00e9, le fichier n'a pas \u00e9t\u00e9 modifi\u00e9. </p> <p>Si on souhaite r\u00e9-\u00e9crire le fichier, il faut rajouter l'argument <code>-i</code> : <code>sops -e -i secret.dev.yml</code></p> <p>Pour d\u00e9chiffrer le fichier, il suffit de faire la m\u00eame commande en changeant <code>-e</code> par <code>-d</code> (decrypt).</p> <p>Si jamais je chiffre mon fichier <code>secret.dev.yml</code> et que je change de cl\u00e9, nous serons dans l'incapacit\u00e9 de le chiffrer :  <pre><code>\u279c sops -d -i secret.dev.yml\nFailed to get the data key required to decrypt the SOPS file.\n\nGroup 0: FAILED\n  age14ysm820ajay8wqslnkjqcewvq4tmeucth3a88qk4a7hl0mnwkfaqmj6xx5: FAILED\n    - | no age identity found in \"~/.keys/ma-cle\" that\n      | could decrypt the data\n\nRecovery failed because no master key was able to decrypt the file. In\norder for SOPS to recover the file, at least one key has to be successful,\nbut none were.\n</code></pre></p> <p>Pour ajouter une cl\u00e9 pouvant d\u00e9chiffrer les fichiers, rajoutez-l\u00e0 dans votre <code>.sops.yaml</code>.</p> <p>En d\u00e9chiffrant puis rechiffrant les fichiers, la nouvelle cl\u00e9 y aura acc\u00e8s.</p>"},{"location":"sops/#chiffrer-avant-de-commiter","title":"Chiffrer avant de commiter","text":"<p>Mais comme Skynet (ou ChatGPT) n'a pas encore remplac\u00e9 les informaticiens : nous restons humains. Il est donc obligatoire de trouver un moyen pour ne jamais oublier de chiffrer nos secrets avant de commit. Et la solution est simple : pre-commit</p> <p>:::note Pre-Commit Pre-Commit est un utilitaire en Python permettant d'automatiser certaines taches avant de commit votre code. Il est ainsi possible de faire votre propre CI en testant vos fichiers ou \u2026 en chiffrant vos secrets. :::</p> <p>L'installation de pre-commit se fait avec <code>pip</code> (Si vous n'\u00eates pas \u00e0 l'aise avec Python, je vous invite \u00e0 suivre cette documentation pour l'installer.).</p> <pre><code>pip install pre-commit\n</code></pre> <p>Si vous avez install\u00e9 <code>pip</code> mais que vous n'arrivez pas \u00e0 le lancer car <code>commande introuvable</code>, c'est surement car celui-ci ne s'est pas mis dans votre <code>$PATH</code>.  Il faudra ajouter le dossier <code>~/.local/bin</code> dans votre fichier <code>.bashrc</code> ou <code>.zshrc</code>. <pre><code>export PATH=\"$PATH:$HOME/.local/bin\n</code></pre></p> <p>Une fois pre-commit install\u00e9, il faudra l'activer dans un dossier g\u00e9rer par Git:</p> <pre><code>\u279c  pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>Nous allons maintenant cr\u00e9er le fichier <code>.pre-commit-config.yaml</code>. avec le contenu suivant:  </p> <pre><code>repos:\n- repo: local\n  hooks:\n    - id: encrypt files\n      name: encrypt files\n      entry: .pre-commit-sops.sh\n      language: script\n      pass_filenames: true\n</code></pre> <p>Cette configuration permet \u00e0 pre-commit d'ex\u00e9cuter le script <code>.pre-commit-sops.sh</code> avant chaque commit. Et voici le contenu de ce fichier : </p> <p><pre><code>#!/bin/bash\nlog_file=\"./pre-commit.log\"\nfor filename in \"$@\"\ndo\necho \"Checking.... $filename\"\nif [[ \"$filename\" =~ ^secret\\..*\\.ya?ml$ ]]; then\necho \"$filename matches pattern, encrypting...\" &gt;&gt; $log_file\nsops -e -i $filename\ngit add $filename\nelse\necho \"$filename does not match pattern and will not be encrypted\" &gt;&gt; $log_file\nfi\ndone\n</code></pre> Donc si le fichier correspond au pattern identifiant les fichiers contenants les secrets, nous le chiffrons, et nous actualisons son contenu avant de commit.</p> <p>Pensez \u00e9galement \u00e0 rendre votre fichier ex\u00e9cutable.</p> <p>On teste \u00e7a, le fichier <code>secret.dev.yml</code> devrait \u00eatre chiffr\u00e9 apr\u00e8s mon commit.  <pre><code>TheBidouilleur:~/Documents/GitOps$ cat secret.dev.yaml username: bigusername\npassword: bigpassword\nchiffre-pas-\u00e7a: coucou2\nTheBidouilleur:~/Documents/GitOps$ git add secret.dev.yaml TheBidouilleur:~/Documents/GitOps$ git commit -m \"Je veux chiffrer mes secrets\"\nencrypt files............................................................Passed\n[main 7ffcf4a] Je veux chiffrer mes secrets\n 1 file changed, 23 insertions(+), 25 deletions(-)\nrewrite secret.dev.yaml (75%)\nTheBidouilleur:~/Documents/GitOps$ cat secret.dev.yaml username: ENC[AES256_GCM,data:wrK2xpPUBYE9dEo=,iv:B2KKu9Y3BeT9Cj8cgZFmxeK70ZOiJhE7wtRkYk0hY4U=,tag:MKgFQqkSOD9tCVp1PlnVOA==,type:str]\npassword: ENC[AES256_GCM,data:qCTcjaUbPpzzMUc=,iv:q3vmXf2YbZtSgm1vCj5tpdu+Ug4Hby9IOo2/y7zBwQI=,tag:0TvqVAIDxxPLk1GsEDKXcQ==,type:str]\nchiffre-pas-\u00e7a: coucou2\nsops:\n    kms: []\ngcp_kms: []\nazure_kv: []\nhc_vault: []\nage:\n        - recipient: age14ysm820ajay8wqslnkjqcewvq4tmeucth3a88qk4a7hl0mnwkfaqmj6xx5\n          enc: |\n-----BEGIN AGE ENCRYPTED FILE-----\n            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSByTFFQMU95dVc3dkk5Y2VB\n            TFQ3czc5WDliNXpOV001b3FaNWdGbW82ampVCitzVGFmemFvdC9kVnF4SlBNMGdi\n            Yjc3ZERiMWVKZXoveFdHbVRWU3pRc1kKLS0tIDFCOTh1U0F6QmtsaG1WTElDbjRz\n            TXdCeVpER0h6WG9XZm93bGI2Ni83SXMKCPLM5tTUYkhjirljDcNitID/2NXbOx4y\n            i5/f79+ulVkWm9hx+AmNBxdbzbopJOk+/y1UmWF64y7ovPjdFy5BSg==\n-----END AGE ENCRYPTED FILE-----\n    lastmodified: \"2023-02-15T21:22:28Z\"\nmac: ENC[AES256_GCM,data:2PlCiFkxCl84odqZ6Qxo74VLhAe2Tqa7pUDbYJTshpG+WKYj/mN9xvfU3Pz8NNe5vWoone2PV2nLvrLQlDQEjnM5PybLRVcSDiSPHF61VfdiI4G25DTScrHWmucSxIv7JFlagVH8JOjii43oe4Ul+coVhhSn3PClIS3X22ZqjUI=,iv:mSZ6Pl0Q7RT3hSFsP0pmF77XnzNyZ6c50G2lsIw6zOU=,tag:z6RH/DDhpRk7rtigdc3mXA==,type:str]\npgp: []\nencrypted_regex: ^(username|password)$\n    version: 3.7.3\n</code></pre></p>"},{"location":"start/","title":"Lancement du projet","text":"<p>Avant de lancer la commande <code>task</code> qui va ex\u00e9cuter les t\u00e2ches une-par-une, il convient de v\u00e9rifier que les d\u00e9pendances soient pr\u00e9sentes sur votre machine.</p> <p>La page permettant d'installer les d\u00e9pendances est accessible ici</p>"},{"location":"start/#configuration","title":"Configuration","text":"<p>Avant de lancer la t\u00e2che permettant de lancer les \u00e9tapes \u00e0 la suite. Il est n\u00e9cessaire de configurer les fichiers suivants\u00a0:</p> <ul> <li><code>Taskfile.yaml</code></li> <li><code>secret.dev.yaml</code></li> </ul>"},{"location":"start/#taskfile","title":"Taskfile","text":"<p>Dans le fichier <code>Taskfile.yaml</code>, voici les variables \u00e0 \u00e9diter\u00a0:</p> <pre><code>vars:\n  secret_file: ./secret.dev.yaml\n  hypervisor: Libvirt\n  distribution: Debian \n</code></pre> <ul> <li><code>secret_file</code> renvoie vers le fichier contenant les variables n\u00e9cessaire \u00e0 Packer et Terraform.</li> <li><code>hypervisor</code> permet \u00e0 task de lancer Terraform/Packer dans des contextes diff\u00e9rents\u00a0: (ex:<code>VM/Libvirt</code> pour Terraform si l'hyperviseur est <code>Libvirt</code>). Pour l'instant, je n'ai pr\u00e9vu que Proxmox et Libvirt.</li> <li><code>distribution</code> fonctionne d'une mani\u00e8re identique \u00e0 <code>hypervisor</code> : permet \u00e0 Packer/Terraform de trouver des contextes adapt\u00e9s (ex:<code>VM/Libvirt/Debian</code> si l'hyperviseur est <code>Libvirt</code> et la distribution est <code>Debian</code>)</li> </ul>"},{"location":"start/#secretfile","title":"SecretFile","text":"<p>Voici un fichier <code>secret.dev.yml</code> fonctionnel:</p> <pre><code>vmtemplate:\ndebian:\nenabled: true\nid: 9001 # Only for Proxmox\nname: Debian\nroot_password: rootpassword\nusername: utilisateur\npassword: pass\n# Depending of the format of the disk\ndisk_prefix: vd\ncpu: 2\nmemory: 1024\n# Only absolute path\nssh_key: /home/kiko/.ssh/id_ed25519.pub\ndisk_size: 8192\niso:\nurl: https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-11.6.0-amd64-netinst.iso\nchecksum: sha512:224cd98011b9184e49f858a46096c6ff4894adff8945ce89b194541afdfd93b73b4666b0705234bd4dff42c0a914fdb6037dd0982efb5813e8a553d8e92e6f51\nhypervisor:\nlibvirt:\npool_dir: ~/.libvirt/pool\npool_name: cluster\n# Libvirt will use qemu:///system as URI\nprovisionning:\ndebian:\nenabled: true\ncpu: 2\nmemory: 1024\n# Only compatible for Debian, Alpine is not yet supported by k3s-ansible\nkubernetes:\nenabled: true\nnodes: 2\n</code></pre> <p>Par d\u00e9faut, ce fichier va d\u00e9ployer 2 machines virtuelles et lancer le r\u00f4le <code>k3s-ansible</code> pour installer Kubernetes</p>"},{"location":"start/#lancer-le-projet","title":"Lancer le projet","text":""},{"location":"start/#methode-automatique","title":"M\u00e9thode automatique","text":"<p>Pour lancer les diff\u00e9rentes \u00e9tapes \u00e0 la suite, il suffit de lancer la commande :</p> <pre><code>task general:all\n</code></pre> <p>R\u00e9sultat de la commande :</p>"},{"location":"start/#methode-manuelle","title":"M\u00e9thode manuelle","text":"<p>Il est \u00e9galement possible de lancer les \u00e9tapes une-par-une en utilisant task.</p> <p>En utilisant la commande <code>task -l</code>, vous verrez les diff\u00e9rentes actions configur\u00e9es:</p> <pre><code>task: Available tasks for this project:\n* general:all:                     Run every task\n* general:clean:                   Clean everything\n* general:env:                     Generate dotenv file\n* general:prepare-ansible:         clone k3s-ansible if needed\n* kubernetes:check-flux-pre:       Check if flux can be installed\n* kubernetes:configure-flux:       Check if flux can be installed\n* kubernetes:fetch_config:         Download the kubeconfig of master\n* kubernetes:install-flux:         Check if flux can be installed\n* kubernetes:pods:                 Get all running pods\n* packer:debian:                   Run Debian-Packer\n* terraform:alpine:                Running Alpine terraform\n* terraform:debian:                Running Debian terraform\n* terraform:destroy-debian:        Running Debian terraform\n* terraform:provisioning:          Launch Terraform\n</code></pre> <p>Voici les \u00e9tapes lanc\u00e9es dans l'ordre :</p> <ul> <li>general:env</li> <li>general:prepare-ansible</li> <li>packer:debian</li> <li>terraform:provisioning</li> <li>kubernetes:fetch_config</li> <li>kubernetes:check-flux-pre</li> <li>kubernetes:install-flux</li> </ul>"}]}